import os
import asyncio
import sqlite3
from datetime import datetime

from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart
from aiogram.types import (
    Message, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
)
from aiogram.client.bot import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º .env –∏–∑ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –µ—Å–ª–∏ —Ñ–∞–π–ª –µ—Å—Ç—å
if os.path.exists(".env"):
    load_dotenv()
else:
    print("Warning: .env file not found, –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –±—É–¥—É—Ç –±—Ä–∞—Ç—å—Å—è –∏–∑ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫")

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("BOT_TOKEN")

if not TOKEN:
    print("–û—à–∏–±–∫–∞: —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN.")
    exit()

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
CATEGORIES = ['üè† –ê—Ä–µ–Ω–¥–∞', 'üíº –†–∞–±–æ—Ç–∞', 'üîß –£—Å–ª—É–≥–∏', 'üõí –ö—É–ø–ª—é/–ü—Ä–æ–¥–∞–º', 'üéÅ –û—Ç–¥–∞–º –¥–∞—Ä–æ–º']

# FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è
class AdStates(StatesGroup):
    category = State()
    title = State()
    description = State()
    price = State()
    photo = State()
    contact = State()

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ SQLite (–±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –≤ —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–µ)
conn = sqlite3.connect("ads.db")
cursor = conn.cursor()

cursor.execute('''CREATE TABLE IF NOT EXISTS ads (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    category TEXT,
    title TEXT,
    description TEXT,
    price TEXT,
    photo TEXT,
    contact TEXT,
    created_at TEXT
)''')

cursor.execute('''CREATE TABLE IF NOT EXISTS ad_limits (
    user_id INTEGER,
    date TEXT,
    count INTEGER,
    PRIMARY KEY(user_id, date)
)''')

conn.commit()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ")],
        [KeyboardButton(text="üîç –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è")]
    ],
    resize_keyboard=True
)

category_kb = InlineKeyboardMarkup(
    inline_keyboard=[[InlineKeyboardButton(text=cat, callback_data=f"cat_{cat}")] for cat in CATEGORIES]
)

@dp.message(CommandStart())
async def start_cmd(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ –ü–ª—å–∑–µ–Ω—é –∏ –æ–∫—Ä–µ—Å—Ç–Ω–æ—Å—Ç—è–º.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_kb)

@dp.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ")
async def add_ad(message: Message, state: FSMContext):
    user_id = message.from_user.id
    date_str = datetime.now().date().isoformat()
    cursor.execute("SELECT count FROM ad_limits WHERE user_id = ? AND date = ?", (user_id, date_str))
    row = cursor.fetchone()
    if row and row[0] >= 5:
        await message.answer("–í—ã —É–∂–µ –¥–æ–±–∞–≤–∏–ª–∏ 5 –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å–µ–≥–æ–¥–Ω—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∑–∞–≤—Ç—Ä–∞.")
        return
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=category_kb)
    await state.set_state(AdStates.category)

@dp.callback_query(F.data.startswith("cat_"))
async def category_chosen(callback: CallbackQuery, state: FSMContext):
    category = callback.data[4:]
    await state.update_data(category=category)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:")
    await state.set_state(AdStates.title)
    await callback.answer()

@dp.message(AdStates.title)
async def ad_title(message: Message, state: FSMContext):
    await state.update_data(title=message.text)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ:")
    await state.set_state(AdStates.description)

@dp.message(AdStates.description)
async def ad_description(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É (–≤ CZK):")
    await state.set_state(AdStates.price)

@dp.message(AdStates.price)
async def ad_price(message: Message, state: FSMContext):
    await state.update_data(price=message.text)
    await message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ (–æ–¥–Ω—É –∫–∞—Ä—Ç–∏–Ω–∫—É) –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ, –Ω–∞–ø–∏—Å–∞–≤ '–Ω–µ—Ç':")
    await state.set_state(AdStates.photo)

@dp.message(AdStates.photo)
async def ad_photo(message: Message, state: FSMContext):
    file_id = None
    if message.photo:
        file_id = message.photo[-1].file_id
    elif message.text and message.text.lower() == "–Ω–µ—Ç":
        file_id = None
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç'.")
        return
    await state.update_data(photo=file_id)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é (—Ç–µ–ª–µ—Ñ–æ–Ω, Telegram –∏ —Ç.–ø.):")
    await state.set_state(AdStates.contact)

@dp.message(AdStates.contact)
async def ad_contact(message: Message, state: FSMContext):
    data = await state.get_data()
    user_id = message.from_user.id
    date_str = datetime.now().date().isoformat()

    cursor.execute("SELECT count FROM ad_limits WHERE user_id = ? AND date = ?", (user_id, date_str))
    row = cursor.fetchone()
    if row:
        cursor.execute("UPDATE ad_limits SET count = count + 1 WHERE user_id = ? AND date = ?", (user_id, date_str))
    else:
        cursor.execute("INSERT INTO ad_limits (user_id, date, count) VALUES (?, ?, 1)", (user_id, date_str))

    cursor.execute(
        "INSERT INTO ads (user_id, category, title, description, price, photo, contact, created_at) VALUES (?, ?, ?, ?, ?, ?, ?, ?)",
        (user_id, data['category'], data['title'], data['description'], data['price'], data['photo'], message.text, datetime.now().isoformat())
    )
    conn.commit()

    await message.answer("–û–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ! –°–ø–∞—Å–∏–±–æ!", reply_markup=main_kb)
    await state.clear()

@dp.message(F.text == "üîç –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è")
async def view_ads(message: Message):
    cursor.execute("SELECT category, title, description, price, photo, contact, created_at FROM ads ORDER BY id DESC LIMIT 5")
    ads = cursor.fetchall()
    if not ads:
        await message.answer("–û–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç.")
        return
    for ad in ads:
        text = (f"<b>{ad[1]}</b>\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {ad[0]}\n–¶–µ–Ω–∞: {ad[3]} CZK\n"
                f"–û–ø–∏—Å–∞–Ω–∏–µ: {ad[2]}\n–ö–æ–Ω—Ç–∞–∫—Ç: {ad[5]}\n–î–æ–±–∞–≤–ª–µ–Ω–æ: {ad[6][:10]}")
        if ad[4]:
            await message.answer_photo(photo=ad[4], caption=text)
        else:
            await message.answer(text)

async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
